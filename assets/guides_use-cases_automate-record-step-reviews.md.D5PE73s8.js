import{_ as r,C as i,c as n,o as t,ah as o,b as l,w as a,a as p,G as d,ai as c}from"./chunks/framework.D1Ff5WEQ.js";const v=JSON.parse('{"title":"Automate Step Reviews with Custom Forms","description":"Use Amiqus webhooks and API endpoints to automate reviewing a completed check based on client form data","frontmatter":{"title":"Automate Step Reviews with Custom Forms","description":"Use Amiqus webhooks and API endpoints to automate reviewing a completed check based on client form data"},"headers":[],"relativePath":"guides/use-cases/automate-record-step-reviews.md","filePath":"guides/use-cases/automate-record-step-reviews.md","lastUpdated":1751554318000}'),u={name:"guides/use-cases/automate-record-step-reviews.md"};function h(m,e,f,w,b,q){const s=i("Mermaid");return t(),n("div",null,[e[1]||(e[1]=o('<h1 id="automate-step-reviews-with-custom-forms" tabindex="-1">Automate Step Reviews with Custom Forms <a class="header-anchor" href="#automate-step-reviews-with-custom-forms" aria-label="Permalink to &quot;Automate Step Reviews with Custom Forms&quot;">‚Äã</a></h1><p>This guide shows how to automatically review an Amiqus check based on responses to a custom form. By combining our webhook and review APIs, you can reduce manual review touch points.</p><p>This guide is suitable for developers building integrations <em>and</em> non-technical stakeholders who want to understand what&#39;s possible with Amiqus automation.</p><blockquote><p>üí° If you&#39;re new to creating clients and issuing checks, start with our <a href="/guides/use-cases/registration-flow.html">Standard Integration Flow</a>.</p></blockquote><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">‚Äã</a></h2><p>Before starting this guide, you should already have:</p><ul><li>Created a <strong>Client</strong> and <strong>Record</strong> using the <a href="/guides/use-cases/registration-flow.html">registration flow</a></li><li>Registered a <a href="/guides/webhooks.html#available-webhooks">webhook</a> to listen for <code>record.finished</code> events</li><li>Retained the <strong>Record ID</strong>, <strong>Step ID</strong> and <strong>Reference</strong> for the custom form check within the record</li><li>Amiqus API credentials with access to the necessary endpoints</li></ul><h2 id="overview-of-the-automation-flow" tabindex="-1">Overview of the automation flow <a class="header-anchor" href="#overview-of-the-automation-flow" aria-label="Permalink to &quot;Overview of the automation flow&quot;">‚Äã</a></h2>',8)),(t(),l(c,null,{default:a(()=>[d(s,{id:"mermaid-45",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20autonumber%0A%20%20%20%20participant%20Your%20App%0A%20%20%20%20participant%20Amiqus%20API%0A%0A%20%20%20%20Your%20App-%3E%3EAmiqus%3A%20Create%20Client%0A%20%20%20%20Amiqus--%3E%3EYour%20App%3A%20client_id%0A%20%20%20%20Your%20App-%3E%3EAmiqus%3A%20Create%20Record%20(with%20custom%20form%20step)%0A%20%20%20%20Amiqus--%3E%3EYour%20App%3A%20record_id%20and%20reference%0A%20%20%20%20User-%3E%3EAmiqus%3A%20Completes%20all%20steps%20in%20the%20check%0A%20%20%20%20Amiqus--%3E%3EYour%20App%3A%20Webhook%20-%20record.finished%0A%20%20%20%20Your%20App-%3E%3EAmiqus%3A%20Retrieve%20form%20data%20for%20custom%20form%20step%0A%20%20%20%20Your%20App-%3E%3EYour%20App%3A%20Evaluate%20form%20values%0A%20%20%20%20Your%20App-%3E%3EAmiqus%3A%20Submit%20review%20for%20step%20(approved%2Frejected)%0A%20%20%20%20Your%20App-%3E%3EAmiqus%3A%20Mark%20record%20as%20reviewed%0A"})]),fallback:a(()=>e[0]||(e[0]=[p(" Loading... ")])),_:1})),e[2]||(e[2]=o(`<h2 id="step-by-step-guide" tabindex="-1">Step-by-step guide <a class="header-anchor" href="#step-by-step-guide" aria-label="Permalink to &quot;Step-by-step guide&quot;">‚Äã</a></h2><h3 id="_1-wait-for-the-record-finished-webhook" tabindex="-1">1. Wait for the <code>record.finished</code> webhook <a class="header-anchor" href="#_1-wait-for-the-record-finished-webhook" aria-label="Permalink to &quot;1. Wait for the \`record.finished\` webhook&quot;">‚Äã</a></h3><p>Once the client completes all steps, your registered webhook will receive a <code>record.finished</code> event. This means the check is ready for review.</p><p>Webhook documentation: <a href="/guides/webhooks.html#available-webhooks">record.finished</a></p><blockquote><p>üìù You must store the Record ID and associated Step ID(s) when the record is first created, as these are needed later to submit a review.</p></blockquote><h3 id="_2-retrieve-the-form-data" tabindex="-1">2. Retrieve the form data <a class="header-anchor" href="#_2-retrieve-the-form-data" aria-label="Permalink to &quot;2. Retrieve the form data&quot;">‚Äã</a></h3><p>When you create a record, Amiqus returns an array of <code>steps</code> in the response. For any step of type <code>form</code> (sometimes referred to as a <strong>Client Form</strong>), the <code>form</code> field contains a unique reference. This is the reference you‚Äôll use to retrieve the submitted form data.</p><blockquote><p>‚ö†Ô∏è Although the API docs mention <code>client_form</code>, the field you need is found under the <code>form</code> property in the step object when you create a record.</p></blockquote><blockquote><p>‚úÖ If you&#39;ve already stored the <code>form</code> reference from the record creation response, you can skip listing the steps.</p></blockquote><p>If you do <strong>not</strong> have the form reference stored:</p><ul><li><a href="https://developers.amiqus.co/aqid/api-reference.html#tag/Records/operation/get-records-id-steps" target="_blank" rel="noreferrer">List all steps for the record</a></li><li>Identify the step with <code>&quot;type&quot;: &quot;form&quot;</code></li><li>Extract the <code>form</code> field ‚Äî this is the reference you‚Äôll use</li></ul><p>Then call the <a href="https://developers.amiqus.co/aqid/api-reference.html#tag/Clients/operation/get-clients-id-forms-reference" target="_blank" rel="noreferrer">Retrieve a Form for a Client</a> endpoint.</p><p>This will return the submitted form data, including field values, types, and labels.</p><h3 id="_3-apply-your-business-logic" tabindex="-1">3. Apply your business logic <a class="header-anchor" href="#_3-apply-your-business-logic" aria-label="Permalink to &quot;3. Apply your business logic&quot;">‚Äã</a></h3><p>You can now apply your own logic to determine whether the check passes. For example, in a <strong>staff vetting</strong> use case:</p><ul><li>If the form includes a field called <strong>&quot;Contract type&quot;</strong> and the value is &quot;Full-time&quot;</li><li>And a field <strong>&quot;Job title&quot;</strong> is not blank</li></ul><p>...then you may choose to auto-approve the check.</p><p>Example pseudo-logic:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>if (form[&quot;Contract type&quot;] === &quot;Full-time&quot; &amp;&amp; form[&quot;Job title&quot;] !== &quot;&quot;) {</span></span>
<span class="line"><span>    review = &quot;approved&quot;;</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    review = &quot;rejected&quot;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>‚úÖ You are free to define any review logic that makes sense for your use case.</p></blockquote><h3 id="_4-submit-a-step-review" tabindex="-1">4. Submit a step review <a class="header-anchor" href="#_4-submit-a-step-review" aria-label="Permalink to &quot;4. Submit a step review&quot;">‚Äã</a></h3><p>Use the <a href="https://developers.amiqus.co/aqid/api-reference.html#tag/Records/operation/post-records-recordId-steps-stepId-reviews" target="_blank" rel="noreferrer">Create a Review for a Step</a> endpoint to submit your review. Example payload:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">review</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">approved</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Auto-reviewed: contract is full-time and job title provided.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_5-mark-the-record-as-reviewed" tabindex="-1">5. Mark the record as reviewed <a class="header-anchor" href="#_5-mark-the-record-as-reviewed" aria-label="Permalink to &quot;5. Mark the record as reviewed&quot;">‚Äã</a></h3><p>After all step reviews are submitted, finalise the record by calling:</p><p><a href="https://developers.amiqus.co/aqid/api-reference.html#tag/Records/operation/patch-records-id" target="_blank" rel="noreferrer">Mark Record as Reviewed</a></p><h2 id="what-happens-next" tabindex="-1">What happens next? <a class="header-anchor" href="#what-happens-next" aria-label="Permalink to &quot;What happens next?&quot;">‚Äã</a></h2><p>Once reviewed, the record&#39;s status is updated in Amiqus and will reflect in the dashboard. You can notify internal systems or trigger next steps (e.g. onboarding a new hire) based on the result.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">‚Äã</a></h2><p>By combining our webhook, form retrieval, and review APIs, you can:</p><ul><li>Build low-touch automated decision flows</li><li>Reduce manual review effort for known safe scenarios</li><li>Integrate Amiqus checks more deeply into your business logic</li></ul>`,31))])}const y=r(u,[["render",h]]);export{v as __pageData,y as default};
